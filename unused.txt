class Player(pygame.sprite.Sprite): # We passed a class as an argument. The Player class will be derived from the Sprite class!
    # Class (~static) variables
    speed = 250
    colliderSize = (44, 96)

    def __init__(self):
        # Instance variables
        self.pos = Vector2(.5 * SCREEN_SIZE[0], .5 * SCREEN_SIZE[1]) # move to center

        super().__init__() # calls the init function in Sprite 
        self.image = pygame.image.load("Materials/Player.png")
        self.surf = pygame.Surface(Player.colliderSize) # create border
        self.rect = self.surf.get_rect()
 
    def input(self):
        # Read input
        pressed_keys = pygame.key.get_pressed()

        # Summarize input (+ boundaries)
        self.inputDir = Vector2.zero()
        
        if pressed_keys[K_UP] and self.rect.top > 0:
            self.inputDir += Vector2.up()
        if pressed_keys[K_DOWN] and self.rect.bottom < SCREEN_SIZE[1]:
            self.inputDir += Vector2.down()
        if pressed_keys[K_LEFT] and self.rect.left > 0:
            self.inputDir += Vector2.left()
        if pressed_keys[K_RIGHT] and self.rect.right < SCREEN_SIZE[0]:
            self.inputDir += Vector2.right()
        
        self.pos += self.inputDir.normalized() * Player.speed * dT

    def move(self):
        # Apply movement
        self.rect.move_ip(self.pos.x - self.rect.center[0], self.pos.y - self.rect.center[1])
        #self.rect.update(self.pos.x, self.pos.y, Player.colliderSize[0], Player.colliderSize[1])        
 
    def draw(self, surface):
        surface.blit(self.image, self.rect)     

def test_shapes():
    display_surface.fill(SCREEN_BACKGROUND)
    
    pygame.draw.line(display_surface, BLUE, (150,130), (130,170))
    pygame.draw.line(display_surface, BLUE, (150,130), (170,170))
    pygame.draw.line(display_surface, GREEN, (130,170), (170,170))
    pygame.draw.circle(display_surface, WHITE, (100,50), 30)
    pygame.draw.circle(display_surface, WHITE, (200,50), 30)
    pygame.draw.rect(display_surface, RED, (100, 200, 100, 50), 2)
    pygame.draw.rect(display_surface, WHITE, (110, 260, 80, 5))

    pygame.display.update()

def test_vector2():
    v1 = Vector2(2, 1)
    v1.print('v1')
    v2 = Vector2()
    v2.print('v2')
    v2.x, v2.y = 3, 3
    v2.print('v2')
    print()
    print('v3 = v1 + v2')
    v3 = v1 + v2
    v3.print('v3')
    print()
    print('v3 -= (10, 10)')
    v3 -= Vector2(10, 10)
    v3.print('v3')
    print()
    print('v3 /= 2')
    v3 /= 2
    v3.print('v3')
    print('v4 = v3 / 2')
    v4 = v3 / 2
    v4.print('v4')
    print()
    print('v5 = v4 * (-2)')
    v5 = v4 * (-2)
    v5.print()
    print('v4 *= (-2)')
    v4 *= (-2)
    v4.print()
    print()
    v7 = Vector2(-4.1, 3.2)
    v8 = Vector2(-4.1, 3.2)
    print('Distance between v7 and v8: ' + '{:.6f}'.format(Vector2.distance(v7, v8)))
    if v7 == v8:
        print('They are equal')
    else:
        print('They are different')
    print()
    print('v7 magnitude = ' + '{:.2f}'.format(v7.magnitude()))
    v8 = v7.normalized()
    v8.print('v8 = v7 normalized')
    v8 *= v7.magnitude()
    v8.print('v8 *= v7.magnitude')
